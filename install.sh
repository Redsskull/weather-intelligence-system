#!/bin/bash
# Weather Intelligence System - Safe Distribution Installer
# Designed for safe installation via curl or wget
# Usage: curl -fsSL https://raw.githubusercontent.com/redsskull/weather-intelligence-system/main/install.sh | bash
#        wget -qO- https://raw.githubusercontent.com/redsskull/weather-intelligence-system/main/install.sh | bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}üå§Ô∏è  Weather Intelligence System - Safe Installer${NC}"
echo "=================================================="
echo ""

# Check if running with sudo (not recommended)
if [ "$EUID" -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Running as root. This is not recommended.${NC}"
    echo -e "${YELLOW}It's better to run this script as a regular user.${NC}"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Check prerequisites
echo -e "${BLUE}üîç Checking prerequisites...${NC}"
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Error: Python3 is not installed${NC}"
    exit 1
fi

if ! command -v go &> /dev/null; then
    echo -e "${RED}‚ùå Error: Go is not installed${NC}"
    exit 1
fi

if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Error: Git is not installed${NC}"
    exit 1
fi

# Determine safe installation directory
echo -e "${BLUE}üìÅ Determining safe installation directory...${NC}"

# Check for user-writable directories in PATH, with preference to user directories
INSTALL_DIR=""
for dir in "$HOME/.local/bin" "$HOME/bin" "/tmp/weather-bin"; do
    if [ -d "$dir" ] && [ -w "$dir" ]; then
        INSTALL_DIR="$dir"
        echo -e "${GREEN}‚úÖ Found writable directory:${NC} $INSTALL_DIR"
        break
    elif [ -w "$(dirname "$dir")" ]; then
        mkdir -p "$dir"
        INSTALL_DIR="$dir"
        echo -e "${GREEN}‚úÖ Created directory:${NC} $INSTALL_DIR"
        break
    fi
done

# If no suitable directory found, create ~/bin
if [ -z "$INSTALL_DIR" ]; then
    INSTALL_DIR="$HOME/bin"
    mkdir -p "$INSTALL_DIR"
    echo -e "${GREEN}‚úÖ Created directory:${NC} $INSTALL_DIR"
fi

# Determine project installation location
PROJECT_ROOT="$HOME/.local/share/weather-intelligence-system"
echo -e "${BLUE}üì¶ Project installation directory:${NC} $PROJECT_ROOT"

# Clean up any existing installation
if [ -d "$PROJECT_ROOT" ]; then
    echo -e "${YELLOW}üóëÔ∏è  Removing existing installation...${NC}"
    rm -rf "$PROJECT_ROOT"
fi

# Clone the repository
echo -e "${BLUE}üì• Cloning repository...${NC}"
mkdir -p "$(dirname "$PROJECT_ROOT")"
git clone https://github.com/redsskull/weather-intelligence-system.git "$PROJECT_ROOT"

# Build Go component
echo -e "${YELLOW}üî® Building Go data collector...${NC}"
cd "$PROJECT_ROOT/go-components/data-collector"
go build -o weather-collector .
cd "$PROJECT_ROOT"

# Setup Python virtual environment
echo -e "${YELLOW}üêç Setting up Python virtual environment...${NC}"
python3 -m venv "$PROJECT_ROOT/venv"
source "$PROJECT_ROOT/venv/bin/activate"
pip install --upgrade pip

if [ -f "$PROJECT_ROOT/requirements.txt" ]; then
    echo -e "${YELLOW}üì¶ Installing Python dependencies...${NC}"
    pip install -r "$PROJECT_ROOT/requirements.txt"
fi

# Copy Go binary to install directory
echo -e "${YELLOW}üöö Installing Go binary...${NC}"
cp "$PROJECT_ROOT/go-components/data-collector/weather-collector" "$INSTALL_DIR/"
chmod +x "$INSTALL_DIR/weather-collector"
echo -e "${GREEN}‚úÖ Go binary installed${NC}"

# Create the weather command script
echo -e "${YELLOW}üöÄ Creating weather command...${NC}"
WEATHER_SCRIPT_PATH="$INSTALL_DIR/weather"
cat > "$WEATHER_SCRIPT_PATH" << 'WEATHER_SCRIPT_END'
#!/bin/bash
# Weather Intelligence System Command
# This script is automatically generated by the installer

# Set the project root to the standard location
PROJECT_ROOT="$HOME/.local/share/weather-intelligence-system"

# Check if project was found
if [ ! -f "$PROJECT_ROOT/project.py" ]; then
    echo "‚ùå Error: Weather Intelligence System not found!"
    echo "Expected location: $PROJECT_ROOT"
    exit 1
fi

cd "$PROJECT_ROOT"

# Activate Python virtual environment and run the program
if [ -f "venv/bin/activate" ]; then
    source venv/bin/activate
else
    echo "‚ùå Error: Python virtual environment not found in $PROJECT_ROOT!"
    exit 1
fi

python project.py "$@"
WEATHER_SCRIPT_END

chmod +x "$WEATHER_SCRIPT_PATH"
echo -e "${GREEN}‚úÖ Weather command installed${NC}"

# Optionally add to shell configuration
echo -e "${BLUE}üîß Checking shell configuration...${NC}"
SHELL_RC=""

# Determine the appropriate shell configuration file
# Check for macOS and common shell configuration files
if [ -n "$ZSH_VERSION" ]; then
    # For zsh, check zprofile first (common on macOS), then zshrc
    if [ -f "$HOME/.zprofile" ] && [ -w "$HOME/.zprofile" ]; then
        SHELL_RC="$HOME/.zprofile"
    elif [ -f "$HOME/.zshrc" ] && [ -w "$HOME/.zshrc" ]; then
        SHELL_RC="$HOME/.zshrc"
    fi
elif [ -n "$BASH_VERSION" ]; then
    # For bash on macOS, bash_profile is commonly used
    if [ -f "$HOME/.bash_profile" ] && [ -w "$HOME/.bash_profile" ]; then
        SHELL_RC="$HOME/.bash_profile"
    elif [ -f "$HOME/.bashrc" ] && [ -w "$HOME/.bashrc" ]; then
        SHELL_RC="$HOME/.bashrc"
    elif [ -f "$HOME/.profile" ] && [ -w "$HOME/.profile" ]; then
        SHELL_RC="$HOME/.profile"
    fi
else
    # Fallback for other shells or if shell version isn't detected
    if [ -f "$HOME/.zprofile" ] && [ -w "$HOME/.zprofile" ]; then
        SHELL_RC="$HOME/.zprofile"
    elif [ -f "$HOME/.zshrc" ] && [ -w "$HOME/.zshrc" ]; then
        SHELL_RC="$HOME/.zshrc"
    elif [ -f "$HOME/.bash_profile" ] && [ -w "$HOME/.bash_profile" ]; then
        SHELL_RC="$HOME/.bash_profile"
    elif [ -f "$HOME/.bashrc" ] && [ -w "$HOME/.bashrc" ]; then
        SHELL_RC="$HOME/.bashrc"
    elif [ -f "$HOME/.profile" ] && [ -w "$HOME/.profile" ]; then
        SHELL_RC="$HOME/.profile"
    fi
fi

# Only add to PATH if not already in PATH
if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
    if [ -n "$SHELL_RC" ] && [ -w "$SHELL_RC" ]; then
        if ! grep -q "export PATH=.*$INSTALL_DIR" "$SHELL_RC" 2>/dev/null; then
            echo "" >> "$SHELL_RC"
            echo "# Added by Weather Intelligence System" >> "$SHELL_RC"
            echo "export PATH=\"\$PATH:$INSTALL_DIR\"" >> "$SHELL_RC"
            echo -e "${GREEN}‚úÖ Added $INSTALL_DIR to PATH in $SHELL_RC${NC}"
            echo -e "${YELLOW}üìù Note: Restart your terminal or run 'source $SHELL_RC' to update PATH${NC}"
        else
            echo -e "${GREEN}‚úÖ PATH already configured in $SHELL_RC${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Could not update shell configuration automatically${NC}"
        echo "Add this to your shell configuration file to use 'weather' command directly:"
        echo "  export PATH=\"\$PATH:$INSTALL_DIR\""
        echo "Then run 'source' on that configuration file or restart your terminal"
    fi
else
    echo -e "${GREEN}‚úÖ $INSTALL_DIR is already in PATH${NC}"
    if [ -n "$SHELL_RC" ]; then
        if ! grep -q "export PATH=.*$INSTALL_DIR" "$SHELL_RC" 2>/dev/null; then
            # Even if the directory is in PATH, add it to shell config for persistence
            if [ -w "$SHELL_RC" ]; then
                echo "" >> "$SHELL_RC"
                echo "# Added by Weather Intelligence System" >> "$SHELL_RC"
                echo "export PATH=\"\$PATH:$INSTALL_DIR\"" >> "$SHELL_RC"
                echo -e "${GREEN}‚úÖ Ensured $INSTALL_DIR is permanently in PATH in $SHELL_RC${NC}"
            else
                echo -e "${YELLOW}‚ÑπÔ∏è  Directory is in PATH but not in shell config (may not persist after restart)${NC}"
            fi
        fi
    fi
fi

# Test the installation
echo -e "${YELLOW}üß™ Testing installation...${NC}"
if [ -f "$WEATHER_SCRIPT_PATH" ] && [ -x "$WEATHER_SCRIPT_PATH" ]; then
    echo -e "${GREEN}‚úÖ Installation files look good!${NC}"
    echo ""
    echo -e "${GREEN}üéâ Installation completed successfully!${NC}"
    echo -e "${BLUE}üí° Usage:${NC}"
    echo "  weather          # Run the weather command (after PATH update)"
    echo "  $WEATHER_SCRIPT_PATH  # Run directly without PATH update"
    echo ""
    echo -e "${YELLOW}üìù Next steps:${NC}"
    if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
        echo "1. Update your PATH as described above"
    fi
    echo "2. Run 'weather' to use the Weather Intelligence System"
else
    echo -e "${RED}‚ùå Installation may have failed${NC}"
    exit 1
fi